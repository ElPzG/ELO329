estos son comandos comunes de Git usados en varias situaciones:

comienza un área de trabajo (ver también: git help tutorial)
   clone             Clona un repositorio dentro de un nuevo directorio
   init              Crea un repositorio de Git vacío o reinicia el que ya existe

trabaja en los cambios actuales (ver también: git help everyday)
   add               Agrega contenido de carpetas al índice
   mv                Mueve o cambia el nombre a archivos, directorios o enlaces simbólicos
   restore           Restaurar archivos de árboles de trabajo
   rm                Borra archivos del árbol de trabajo y del índice
   sparse-checkout   Inicializa y modifica el sparse-checkout

examina el historial y el estado (ver también: git help revisions)
   bisect            Use la búsqueda binaria para encontrar el commit que introdujo el bug
   diff              Muestra los cambios entre commits, commit y árbol de trabajo, etc
   grep              Imprime las líneas que concuerdan con el patron
   log               Muestra los logs de los commits
   show              Muestra varios tipos de objetos
   status            Muestra el estado del árbol de trabajo

crece, marca y ajusta tu historial común
   branch            Lista, crea, o borra ramas
   commit            Graba los cambios en tu repositorio
   merge             Junta dos o más historiales de desarrollo juntos
   rebase            Vuelve a aplicar commits en la punta de otra rama
   reset             Reinicia el HEAD actual a un estado especifico
   switch            Cambiar branches
   tag               Crea, lista, borra o verifica un tag de objeto firmado con GPG

colabora (mira también: git help workflows)
   fetch             Descarga objetos y referencias de otro repositorio
   pull              Realiza un fetch e integra con otro repositorio o rama local
   push              Actualiza referencias remotas junto con sus objetos asociados


'git help -a' y 'git help -g' listan los subcomandos disponibles y algunas
guías de concepto. Consulte 'git help <command>' o 'git help <concepto>'
para leer sobre un subcomando o concepto específico.
Mira 'git help git' para una vista general del sistema.


git config --global user.name "    "
git config --global user.email "<   >"

crear repositorio
git init

clonar (clona todo todo lo del repositorio) esta wea trae el repositorio a tu pc como directorio (carpeta) ahí le agregas
	cosas 
git clone dirección repo 


funcionamiento de git: 
		1.- añadir/modificar/eliminar archivos que hacen unn cambio en nuestro proyecto dentro del directorio de 				trabajo
		2.- añadir lo archivos que producen ese cambio al staging index.
		3.- finalmente confirmar esos cambios en el repositorio 
	
STAGING INDEX (area temporal en el que se añaden archivos con cambios que estamos apunto de enviar a git en forma de 		commit)		
para agregar algo aquí es con add
git add nombre_archivo
git . (agrga todos los archivos)

COMMIT (confirma los cambios que hemos hecho y los envia el repositorio)
git commit (se abre el editor de texto para agregar un comentario) (aquí el mensaje sirve para dar información sobre que 			hace el commit en concreto, ya que lo leeran los compañeros de proyecto)
		 (el mensaje responde a la sig. preguntas: ¿por qué has hecho ese cambio? ¿qué has cambiado? ¿qué ocurrirá 			ahora con el cambio?)
		 (forma. es parecido a como se escriben los mails, ocupar saltos de linea)
luego, guardar cambios y salir del editor (wq) y se genera el commit

 con rm se borra el archivo (también se tiene que hacer un commit) 
git rm nombre_archivo

(TODO ESO SE TRABAJA DE FORMA LOCAL) PARA LLEVARLO AL REPOSITORIO REMOTO (PARA QUE SE VEA EN LA PÁGINA)
git push origin <branch> (branch es la rama (sin <>)) master es la principal
luego pide los datos de la cuenta

git log (pa ver los cambios que se han hecho y con el mensaje)










	

